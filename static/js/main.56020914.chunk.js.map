{"version":3,"sources":["logo.svg","redux/Counter/selectors.js","redux/Counter/constants.js","redux/Counter/actions.js","components/EditableCounter/index.jsx","components/EditableCounter/EditableCounter.jsx","components/Counter/Counter.jsx","components/Counter/index.jsx","components/CounterList/CounterList.jsx","components/CounterList/index.jsx","components/CounterDashboard/CounterDashboard.jsx","components/CounterDashboard/index.jsx","redux/Counter/reducer.js","redux/rootReducer.js","App.js","redux/createStore.js","serviceWorker.js","index.js"],"names":["module","exports","countersSelector","state","counterReducer","counters","counterIDsSelector","counterIDs","INCREASE","DECREASE","UPDATE","ADD","REMOVE","add","counterValues","type","payload","remove","counterID","increase","value","decrease","update","EditableCounter","props","submit","text","id","onAdd","onEdit","parseInt","changeInput","e","target","name","setState","this","cancelFallback","isNew","className","data-testid","onChange","onClick","classNames","button__add","button__update","React","Component","Counter","onDecrease","onIncrease","delete","onDelete","values","onUpdate","toggleEditing","prevState","isEditing","PureComponent","connect","dispatch","bindActionCreators","CounterList","map","counter","key","CounterDashboard","toogleEditableForm","isAdding","handleAddCounter","reducer","action","indexOf","selectedCounter","newCounterID","uniqueId","newCounterIDs","filter","newCounters","reduce","prevCounters","Object","assign","rootReducer","combineReducers","store","preloadedState","createStore","App","src","logo","alt","href","rel","WrappedApp","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56020914.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const countersSelector = (state) => state.counterReducer.counters;\nexport const counterIDsSelector = (state) => state.counterReducer.counterIDs;","export const INCREASE = 'app/COUNTER/INCREASE';\nexport const DECREASE = 'app/COUNTER/DECREASE';\nexport const UPDATE = 'app/COUNTER/UPDATE';\nexport const ADD = 'app/COUNTER/ADD';\nexport const REMOVE = 'app/COUNTER/REMOVE';\nexport const COUNTER_PREFIX = 'COUNTER_'","import {\n  ADD,\n  DECREASE,\n  INCREASE,\n  REMOVE,\n  UPDATE\n} from './constants';\n\nexport const add = counterValues => ({\n  type: ADD,\n  payload: {\n    counterValues\n  }\n});\n\nexport const remove = counterID => ({\n  type: REMOVE,\n  payload: {\n    counterID\n  }\n});\n\nexport const increase = (counterID, value = 1) => ({\n  type: INCREASE,\n  payload: {\n    counterID,\n    value\n  }\n});\nexport const decrease = (counterID, value = 1) => ({\n  type: DECREASE,\n  payload: {\n    counterID,\n    value\n  }\n});\n\nexport const update = (counterID, counterValues) => ({\n  type: UPDATE,\n  payload: {\n    counterID,\n    counterValues\n  }\n});","import EditableCounter from './EditableCounter';\nexport default EditableCounter;\n","import './EditableCounter.scss';\n\nimport React from 'react';\nimport classNames from 'classnames';\n\nclass EditableCounter extends React.Component {\n  constructor(props) {\n    super(props);\n    const { text, value } = this.props;\n    this.state = {\n      text: text || '',\n      value: value || 0,\n    };\n  }\n  submit = () => {\n    const { text, value } = this.state;\n    const { id, onAdd, onEdit } = this.props;\n    if (!text) return;\n    const counterValues = {\n      text,\n      value: parseInt(value),\n    };\n    if (!!id) {\n      onEdit(id, counterValues);\n    } else {\n      onAdd(counterValues);\n    }\n  };\n\n  changeInput = (e) => {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  render() {\n    const { id, cancelFallback } = this.props;\n    const { text, value } = this.state;\n    const isNew = !!!id;\n    return (\n      <div className=\"counter counter-editable\" data-testid=\"counter-editable\">\n        <div className=\"form-group\">\n          <label>Title</label>\n          <input\n            name=\"text\"\n            id=\"counterText\"\n            value={text}\n            onChange={this.changeInput}\n            data-testid=\"text\"\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>Value</label>\n          <input\n            name=\"value\"\n            type=\"number\"\n            value={value}\n            onChange={this.changeInput}\n            data-testid=\"value\"\n          />\n        </div>\n        <div>\n          <button\n            onClick={this.submit}\n            className={classNames('button', {\n              button__add: isNew,\n              button__update: !isNew,\n            })}\n          >\n            {isNew ? 'Add' : 'Save'}\n          </button>\n          <button\n            className=\"button button__cancel\"\n            onClick={cancelFallback}\n            data-testid=\"button-cancel\"\n          >\n            Cancel\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default EditableCounter;\n","import './Counter.scss';\n\nimport React, { PureComponent } from 'react';\n\nimport EditableCounter from '../EditableCounter';\n\nclass Counter extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditing: false\n    };\n  }\n\n  decrease = () => {\n    const { id, onDecrease } = this.props;\n    onDecrease(id);\n  };\n  increase = () => {\n    const { id, onIncrease } = this.props;\n    onIncrease(id);\n  };\n  delete = () => {\n    const { id, onDelete } = this.props;\n    onDelete(id);\n  };\n  update = (id, values) => {\n    const { onUpdate } = this.props;\n    onUpdate(id, values);\n    this.toggleEditing();\n  };\n  toggleEditing = () => {\n    this.setState((prevState) => ({\n      isEditing: !prevState.isEditing\n    }));\n  };\n  render() {\n    const { isEditing } = this.state;\n    const { id, text, value } = this.props;\n    if (isEditing) {\n      return (\n        <EditableCounter\n          id={id}\n          text={text}\n          value={value}\n          onEdit={this.update}\n          cancelFallback={this.toggleEditing}\n        />\n      );\n    }\n    return (\n      <div className=\"counter\" data-testid=\"counter\">\n        <div className=\"button-group button-group--right\">\n          <button\n            onClick={this.toggleEditing}\n            className=\"button button-edit\"\n            data-testid=\"button-edit\"\n          >\n            Edit\n          </button>\n          <button\n            onClick={this.delete}\n            className=\"button button-delete\"\n            data-testid=\"button-delete\"\n          >\n            Delete\n          </button>\n        </div>\n        <h1 className=\"title\" data-testid=\"text\">\n          {text}\n        </h1>\n        <div className=\"control\">\n          <button\n            onClick={this.decrease}\n            className=\"button button-decrease\"\n            data-testid=\"button-decrease\"\n          >\n            -\n          </button>\n          <div className=\"value\">\n            <span data-testid=\"value\">{value}</span>\n          </div>\n          <button\n            onClick={this.increase}\n            className=\"button button-increase\"\n            data-testid=\"button-increase\"\n          >\n            +\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Counter;\n","import {\n  decrease,\n  increase,\n  remove,\n  update\n} from \"../../redux/Counter/actions\";\n\nimport Counter from \"./Counter\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      onIncrease: increase,\n      onDecrease: decrease,\n      onUpdate: update,\n      onDelete: remove\n    },\n    dispatch\n  );\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Counter);\n","import Counter from '../Counter';\nimport React from 'react';\n\nconst CounterList = props => {\n  const { counterIDs = [], counters } = props;\n  return counterIDs.map(counterID => {\n    const counter = counters[counterID];\n    return <Counter key={counterID} id={counterID} {...counter} />;\n  });\n};\n\nexport default CounterList;\n","import {\n  counterIDsSelector,\n  countersSelector\n} from \"../../redux/Counter/selectors\";\n\nimport CounterList from \"./CounterList\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = state => ({\n  counters: countersSelector(state),\n  counterIDs: counterIDsSelector(state)\n});\n\nexport default connect(mapStateToProps)(CounterList);\n","import './CounterDashboard.scss';\n\nimport CounterList from '../CounterList';\nimport EditableCounter from '../EditableCounter';\nimport React from 'react';\n\nclass CounterDashboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isAdding: false,\n    };\n  }\n  toogleEditableForm = () => {\n    this.setState((prevState) => ({ isAdding: !prevState.isAdding }));\n  };\n  handleAddCounter = (counterValues) => {\n    const { onAdd } = this.props;\n    this.setState({\n      isAdding: false,\n    });\n    onAdd(counterValues);\n  };\n\n  render() {\n    const { isAdding } = this.state;\n\n    return (\n      <div className=\"counterPanel\">\n        {!isAdding && (\n          <button\n            onClick={this.toogleEditableForm}\n            className=\"button button-add\"\n          >\n            Add new\n          </button>\n        )}\n        {isAdding && (\n          <EditableCounter\n            onAdd={this.handleAddCounter}\n            cancelFallback={this.toogleEditableForm}\n          />\n        )}\n        <CounterList />\n      </div>\n    );\n  }\n}\n\nexport default CounterDashboard;\n","import CounterDashboard from \"./CounterDashboard\";\nimport { add } from \"../../redux/Counter/actions\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = null;\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      onAdd: add\n    },\n    dispatch\n  );\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CounterDashboard);\n","import {\n  ADD,\n  COUNTER_PREFIX,\n  DECREASE,\n  INCREASE,\n  REMOVE,\n  UPDATE\n} from './constants';\n\nimport uniqueId from 'lodash/uniqueId';\n\n/*\ncounters: {\n    <Counter ID>: {\n      text: 'Counter text',\n      value: 0,\n    }\n  },\n  counterIDs: ['<Counter ID>', ...]\n*/\nconst createInitalState = () => ({\n  counters: {},\n  counterIDs: []\n});\n\nconst reducer = (state = createInitalState(), action) => {\n  const {\n    type,\n    payload = {}\n  } = action;\n  const {\n    counters,\n    counterIDs\n  } = state;\n  switch (type) {\n    case INCREASE: {\n      const {\n        value,\n        counterID\n      } = payload;\n      if (counterIDs.indexOf(counterID) === -1) {\n        return state;\n      }\n      const selectedCounter = counters[counterID];\n      return {\n        ...state,\n        counters: {\n          ...counters,\n          [counterID]: {\n            ...selectedCounter,\n            value: selectedCounter.value + value\n          }\n        }\n      };\n    }\n    case DECREASE: {\n      const {\n        value,\n        counterID\n      } = payload;\n      if (counterIDs.indexOf(counterID) === -1) {\n        return state;\n      }\n      const selectedCounter = counters[counterID];\n\n      return {\n        ...state,\n        counters: {\n          ...counters,\n          [counterID]: {\n            ...selectedCounter,\n            value: selectedCounter.value - value\n          }\n        }\n      };\n    }\n    case UPDATE: {\n      const {\n        counterID,\n        counterValues\n      } = payload;\n      if (counterIDs.indexOf(counterID) === -1) {\n        return state;\n      }\n      const selectedCounter = counters[counterID];\n      return {\n        ...state,\n        counters: {\n          ...counters,\n          [counterID]: {\n            ...selectedCounter,\n            ...counterValues\n          }\n        }\n      };\n    }\n    case ADD: {\n      const {\n        counterValues\n      } = payload;\n      const newCounterID = uniqueId(COUNTER_PREFIX);\n      return {\n        ...state,\n        counterIDs: [...counterIDs, newCounterID],\n        counters: {\n          ...counters,\n          [newCounterID]: {\n            ...counterValues\n          }\n        }\n      };\n    }\n    case REMOVE: {\n      const {\n        counterID\n      } = payload;\n      if (counterIDs.indexOf(counterID) === -1) {\n        return state;\n      }\n      const newCounterIDs = counterIDs.filter(id => id !== counterID);\n      const newCounters = newCounterIDs.reduce((prevCounters, id) =>\n        Object.assign(prevCounters, {\n          [id]: counters[id]\n        }), {}\n      );\n      return {\n        ...state,\n        counters: newCounters,\n        counterIDs: newCounterIDs\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","import {\n  combineReducers\n} from 'redux';\nimport counterReducer from './Counter/reducer';\nconst rootReducer = combineReducers({\n  counterReducer\n})\n\nexport default rootReducer;","import './App.css';\n\nimport CounterPanel from './components/CounterDashboard';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport createStore from './redux/createStore';\nimport logo from './logo.svg';\n\nconst store = createStore();\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p className=\"App-title\">\n          Simple <code>Counter</code> demo and unit tests\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://github.com/phatnguyenuit/redux-counter-example\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Checkout source code\n        </a>\n      </header>\n      <main className=\"App-content\">\n        <CounterPanel />\n      </main>\n    </div>\n  );\n};\n\nconst WrappedApp = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\nexport default WrappedApp;\n","import {\n  createStore\n} from 'redux';\nimport rootReducer from './rootReducer'\n\nexport default (preloadedState = {}) => createStore(rootReducer, preloadedState);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}