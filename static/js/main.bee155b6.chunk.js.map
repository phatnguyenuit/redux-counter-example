{"version":3,"sources":["logo.svg","redux/Counter/constants.ts","redux/Counter/reducer.ts","redux/rootReducer.ts","redux/createStore.ts","redux/Counter/actions.ts","redux/Counter/selectors.ts","components/EditableCounter/index.tsx","components/Counter/Counter.tsx","components/Counter/index.jsx","components/CounterList/CounterList.tsx","components/CounterList/index.tsx","components/CounterDashboard/CounterDashboard.tsx","components/CounterDashboard/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","INCREASE","DECREASE","UPDATE","ADD","REMOVE","generateUniqueID","Date","valueOf","reducer","prevState","counters","counterIDs","action","type","payload","value","counterID","indexOf","selectedCounter","counterValues","newCounterID","newCounterIDs","filter","id","newCounters","reduce","prevCounters","Object","assign","rootReducer","combineReducers","counterReducer","configureStore","preloadedState","createStore","add","remove","increase","decrease","update","countersSelector","state","counterIDsSelector","EditableCounter","props","submit","text","onAdd","onEdit","handleChangeInput","fieldName","e","target","setState","Number","this","cancelFallback","isNew","className","data-testid","htmlFor","onChange","name","onClick","clsx","button__add","button__update","React","PureComponent","Counter","onDecrease","onIncrease","delete","onDelete","values","onUpdate","toggleEditing","isEditing","connect","dispatch","bindActionCreators","CounterList","map","counter","key","CounterDashboard","toogleEditableForm","isAdding","handleAddCounter","store","App","src","logo","alt","href","WrappedApp","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bee155b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const INCREASE = 'app/counter/INCREASE';\nexport const DECREASE = 'app/counter/DECREASE';\nexport const UPDATE = 'app/counter/UPDATE';\nexport const ADD = 'app/counter/ADD';\nexport const REMOVE = 'app/counter/REMOVE';\n","import { ADD, DECREASE, INCREASE, REMOVE, UPDATE } from './constants';\n\nimport { CounterValues } from 'components/Counter/Counter';\nimport { PayloadAction } from '../types';\n\n/*\ncounters: {\n    <Counter ID>: {\n      text: 'Counter text',\n      value: 0,\n    }\n  },\n  counterIDs: ['<Counter ID>', ...]\n*/\n\ninterface CounterState {\n  counters: Record<number, CounterValues>;\n  counterIDs: Array<number>;\n}\n\nconst generateUniqueID = () => new Date().valueOf();\n\nconst createInitalState = (): CounterState => ({\n  counters: {},\n  counterIDs: [],\n});\n\nconst reducer = (\n  prevState = createInitalState(),\n  action: PayloadAction,\n): CounterState => {\n  const { type, payload } = action;\n  const { counters, counterIDs } = prevState;\n  switch (type) {\n    case INCREASE: {\n      const { value, counterID } = action.payload as {\n        value: number;\n        counterID: number;\n      };\n      if (counterIDs.indexOf(counterID) === -1) return prevState;\n\n      const selectedCounter = counters[counterID];\n      return {\n        ...prevState,\n        counters: {\n          ...counters,\n          [counterID]: {\n            ...selectedCounter,\n            value: selectedCounter.value + value,\n          },\n        },\n      };\n    }\n    case DECREASE: {\n      const { value, counterID } = payload as {\n        value: number;\n        counterID: number;\n      };\n      if (counterIDs.indexOf(counterID) === -1) {\n        return prevState;\n      }\n      const selectedCounter = counters[counterID];\n\n      return {\n        ...prevState,\n        counters: {\n          ...counters,\n          [counterID]: {\n            ...selectedCounter,\n            value: selectedCounter.value - value,\n          },\n        },\n      };\n    }\n    case UPDATE: {\n      const { counterID, counterValues } = payload;\n      if (counterIDs.indexOf(counterID) === -1) return prevState;\n\n      const selectedCounter = counters[counterID];\n      return {\n        ...prevState,\n        counters: {\n          ...counters,\n          [counterID]: {\n            ...selectedCounter,\n            ...counterValues,\n          },\n        },\n      };\n    }\n    case ADD: {\n      const { counterValues } = payload as { counterValues: CounterValues };\n      const newCounterID = generateUniqueID();\n      return {\n        ...prevState,\n        counterIDs: [...counterIDs, newCounterID],\n        counters: {\n          ...counters,\n          [newCounterID]: {\n            ...counterValues,\n          },\n        },\n      };\n    }\n    case REMOVE: {\n      const { counterID } = payload as { counterID: number };\n      if (counterIDs.indexOf(counterID) === -1) return prevState;\n\n      const newCounterIDs = counterIDs.filter(id => id !== counterID);\n      const newCounters = newCounterIDs.reduce(\n        (prevCounters, id) =>\n          Object.assign(prevCounters, {\n            [id]: counters[id],\n          }),\n        {},\n      ) as Record<number, CounterValues>;\n      return {\n        ...prevState,\n        counters: newCounters,\n        counterIDs: newCounterIDs,\n      };\n    }\n    default:\n      return prevState;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport counterReducer from './Counter/reducer';\n\nconst rootReducer = combineReducers({\n  counterReducer,\n});\n\nexport default rootReducer;\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { createStore } from 'redux';\nimport rootReducer from './rootReducer';\n\nconst configureStore = (preloadedState = {}) =>\n  createStore(rootReducer, preloadedState);\n\nexport default configureStore;\n","import { ADD, DECREASE, INCREASE, REMOVE, UPDATE } from './constants';\nimport { CounterValues } from 'components/Counter/Counter';\n\nexport const add = (counterValues: CounterValues) => ({\n  type: ADD,\n  payload: {\n    counterValues,\n  },\n});\n\nexport const remove = (counterID: number) => ({\n  type: REMOVE,\n  payload: {\n    counterID,\n  },\n});\n\nexport const increase = (counterID: number, value = 1) => ({\n  type: INCREASE,\n  payload: {\n    counterID,\n    value,\n  },\n});\nexport const decrease = (counterID: number, value = 1) => ({\n  type: DECREASE,\n  payload: {\n    counterID,\n    value,\n  },\n});\n\nexport const update = (counterID: number, counterValues: CounterValues) => ({\n  type: UPDATE,\n  payload: {\n    counterID,\n    counterValues,\n  },\n});\n","import { RootState } from '../rootReducer';\nexport const countersSelector = (state: RootState) =>\n  state.counterReducer.counters;\nexport const counterIDsSelector = (state: RootState) =>\n  state.counterReducer.counterIDs;\n","import React, { MouseEventHandler } from 'react';\nimport clsx from 'clsx';\nimport { CounterValues } from '../Counter/Counter';\n\nimport './styles.css';\n\nclass EditableCounter extends React.PureComponent<\n  EditableCounterProps,\n  EditableCounterState\n> {\n  constructor(props: EditableCounterProps) {\n    super(props);\n    const { text, value } = this.props;\n    this.state = {\n      text: text || '',\n      value: value || 0,\n    };\n  }\n  submit = () => {\n    const { text, value } = this.state;\n    const { id, onAdd, onEdit } = this.props;\n    if (!text) return;\n    const counterValues = {\n      text,\n      value,\n    };\n    if (id && onEdit) {\n      onEdit(id, counterValues);\n    } else if (onAdd) {\n      onAdd(counterValues);\n    }\n  };\n\n  handleChangeInput = (fieldName: keyof EditableCounterState) => (\n    e: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const { value } = e.target;\n\n    if (fieldName === 'value') {\n      this.setState({\n        [fieldName]: Number(value),\n      });\n    } else {\n      this.setState({\n        [fieldName]: value,\n      });\n    }\n  };\n\n  render() {\n    const { id, cancelFallback } = this.props;\n    const { text, value } = this.state;\n    const isNew = !!!id;\n    return (\n      <div className=\"counter counter-editable\" data-testid=\"counter-editable\">\n        <div className=\"form-group\">\n          <label htmlFor=\"counterText\">Title</label>\n          <input\n            id=\"counterText\"\n            value={text}\n            onChange={this.handleChangeInput('text')}\n            data-testid=\"text\"\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"value\">Value</label>\n          <input\n            name=\"value\"\n            id=\"value\"\n            type=\"number\"\n            value={value}\n            onChange={this.handleChangeInput('value')}\n            data-testid=\"value\"\n          />\n        </div>\n        <div>\n          <button\n            onClick={this.submit}\n            className={clsx('button', {\n              // eslint-disable-next-line @typescript-eslint/camelcase\n              button__add: isNew,\n              // eslint-disable-next-line @typescript-eslint/camelcase\n              button__update: !isNew,\n            })}>\n            {isNew ? 'Add' : 'Save'}\n          </button>\n          <button\n            className=\"button button__cancel\"\n            onClick={cancelFallback}\n            data-testid=\"button-cancel\">\n            Cancel\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default EditableCounter;\n\nexport interface EditableCounterProps extends Partial<CounterValues> {\n  id?: number;\n  cancelFallback: MouseEventHandler;\n  onAdd?: (values: CounterValues) => void;\n  onEdit?: (id: number, values: CounterValues) => void;\n}\n\ntype EditableCounterState = CounterValues;\n","import React, { PureComponent } from 'react';\n\nimport EditableCounter from '../EditableCounter';\nimport './styles.css';\n\nclass Counter extends PureComponent<CounterProps, CounterState> {\n  constructor(props: CounterProps) {\n    super(props);\n    this.state = {\n      isEditing: false,\n    };\n  }\n\n  decrease = () => {\n    const { id, onDecrease } = this.props;\n    onDecrease(id);\n  };\n  increase = () => {\n    const { id, onIncrease } = this.props;\n    onIncrease(id);\n  };\n  delete = () => {\n    const { id, onDelete } = this.props;\n    onDelete(id);\n  };\n  update = (id: number, values: CounterValues) => {\n    const { onUpdate } = this.props;\n    onUpdate(id, values);\n    this.toggleEditing();\n  };\n  toggleEditing = () => {\n    this.setState(prevState => ({\n      isEditing: !prevState.isEditing,\n    }));\n  };\n  render() {\n    const { isEditing } = this.state;\n    const { id, text, value } = this.props;\n    if (isEditing) {\n      return (\n        <EditableCounter\n          id={id}\n          text={text}\n          value={value}\n          onEdit={this.update}\n          cancelFallback={this.toggleEditing}\n        />\n      );\n    }\n    return (\n      <div className=\"counter\" data-testid=\"counter\">\n        <div className=\"button-group button-group--right\">\n          <button\n            onClick={this.toggleEditing}\n            className=\"button button-edit\"\n            data-testid=\"button-edit\">\n            Edit\n          </button>\n          <button\n            onClick={this.delete}\n            className=\"button button-delete\"\n            data-testid=\"button-delete\">\n            Delete\n          </button>\n        </div>\n        <h1 className=\"title\" data-testid=\"text\">\n          {text}\n        </h1>\n        <div className=\"control\">\n          <button\n            onClick={this.decrease}\n            className=\"button button-decrease\"\n            data-testid=\"button-decrease\">\n            -\n          </button>\n          <div className=\"value\">\n            <span data-testid=\"value\">{value}</span>\n          </div>\n          <button\n            onClick={this.increase}\n            className=\"button button-increase\"\n            data-testid=\"button-increase\">\n            +\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Counter;\n\nexport type CounterValues = {\n  text: string;\n  value: number;\n};\n\nexport interface CounterProps extends CounterValues {\n  id: number;\n  onIncrease: (id: number) => void;\n  onDecrease: (id: number) => void;\n  onDelete: (id: number) => void;\n  onUpdate: (id: number, values: CounterValues) => void;\n}\n\nexport interface CounterState {\n  isEditing: boolean;\n}\n","import { decrease, increase, remove, update } from 'redux/Counter/actions';\n\nimport Counter from './Counter';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      onIncrease: increase,\n      onDecrease: decrease,\n      onUpdate: update,\n      onDelete: remove,\n    },\n    dispatch,\n  );\n\nexport default connect(null, mapDispatchToProps)(Counter);\n","import Counter from '../Counter';\nimport React from 'react';\nimport { CounterValues } from '../Counter/Counter';\n\nconst CounterList = (props: CounterListProps) => {\n  const { counterIDs = [], counters } = props;\n  return (\n    <>\n      {counterIDs.map(counterID => {\n        const counter = counters[counterID];\n        return <Counter key={counterID} id={counterID} {...counter} />;\n      })}\n    </>\n  );\n};\n\nexport default CounterList;\n\nexport interface CounterListProps {\n  counterIDs: Array<number>;\n  counters: Record<number, CounterValues>;\n}\n","import { connect } from 'react-redux';\n\nimport { RootState } from 'redux/rootReducer';\nimport { counterIDsSelector, countersSelector } from 'redux/Counter/selectors';\n\nimport CounterList from './CounterList';\n\nconst mapStateToProps = (state: RootState) => ({\n  counters: countersSelector(state),\n  counterIDs: counterIDsSelector(state),\n});\n\nexport default connect(mapStateToProps)(CounterList);\n","import React from 'react';\n\nimport CounterList from '../CounterList';\nimport EditableCounter from '../EditableCounter';\nimport { CounterValues } from '../Counter/Counter';\n\nimport './styles.css';\n\nclass CounterDashboard extends React.PureComponent<\n  CounterDashboardProps,\n  CounterDashboardState\n> {\n  constructor(props: CounterDashboardProps) {\n    super(props);\n    this.state = {\n      isAdding: false,\n    };\n  }\n\n  toogleEditableForm = () => {\n    this.setState(prevState => ({ isAdding: !prevState.isAdding }));\n  };\n\n  handleAddCounter = (counterValues: CounterValues) => {\n    const { onAdd } = this.props;\n    this.setState({\n      isAdding: false,\n    });\n    onAdd(counterValues);\n  };\n\n  render() {\n    const { isAdding } = this.state;\n\n    return (\n      <div className=\"counterPanel\">\n        {!isAdding && (\n          <button\n            className=\"button button-add\"\n            onClick={this.toogleEditableForm}>\n            Add new\n          </button>\n        )}\n        {isAdding && (\n          <EditableCounter\n            onAdd={this.handleAddCounter}\n            cancelFallback={this.toogleEditableForm}\n          />\n        )}\n        <CounterList />\n      </div>\n    );\n  }\n}\n\nexport default CounterDashboard;\n\nexport interface CounterDashboardProps {\n  onAdd: (values: CounterValues) => void;\n}\n\nexport interface CounterDashboardState {\n  isAdding: boolean;\n}\n","import { bindActionCreators, Dispatch } from 'redux';\nimport { connect } from 'react-redux';\n\nimport { add } from 'redux/Counter/actions';\nimport CounterDashboard from './CounterDashboard';\n\nconst mapStateToProps = null;\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      onAdd: add,\n    },\n    dispatch,\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CounterDashboard);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport GitHubCorner from 'react-github-corner';\n\nimport createStore from './redux/createStore';\n\nimport CounterPanel from './components/CounterDashboard';\nimport logo from './logo.svg';\n\nimport './App.css';\n\nconst store = createStore();\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p className=\"App-title\">\n          Simple <code>Counter</code> demo and unit tests\n        </p>\n        <GitHubCorner href=\"https://github.com/phatnguyenuit/redux-counter-example\" />\n      </header>\n      <main className=\"App-content\">\n        <CounterPanel />\n      </main>\n    </div>\n  );\n};\n\nconst WrappedApp = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\nexport default WrappedApp;\n","/* eslint-disable no-console */\n/* eslint-disable no-param-reassign */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}